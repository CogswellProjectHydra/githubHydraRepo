from PyQt4.QtGui import *
from PyQt4.QtCore import *

from Ui_TreeNodeWidget import Ui_TreeNodeWidget

class TreeNodeWidget( QWidget, Ui_TreeNodeWidget ):
    """A widget for building tree structures of widgets.
The node widget is displayed above the child widgets, which are indented.
If the node widget is a label containing hyperlinks, the ref should name a method
that will get called when the link is clicked. For example, <a href="toggle">something</a> would
call the toggle method when clicked.
By default the child widgets will be generated by the generateChildren method, which should
be overridden in a subclass. If children are added by explicit calls to addChildWidget, then
generateChildren will not be called.
"""

    def __init__( self ):
        
        QWidget.__init__( self )
        self.setupUi( self )
        
        self.needsChildren = True        
        self.childContainerWidget.setVisible( False ) # hide the children's container to start

    def addNodeWidget( self, nodeWidget ):
        "Add the main widget for this tree node, connecting the linkActivated signal to the dispatchOnLink method."
        self.nodeWidget = nodeWidget
        self.nodeWidgetLayout.addWidget( nodeWidget )
        QObject.connect(nodeWidget, SIGNAL("linkActivated(QString)"), self.dispatchOnLink)

    def addChildWidget( self, childWidget ):
        "Add a child widget to this tree node"
        self.childContainerLayout.addWidget( childWidget )
        self.needsChildren = False

    def dispatchOnLink( self, anchor ):
        "If the parent widget signals linkActivated, find the method named by the link and run it"
        method = getattr( self, str( anchor ) )
        method ( )

    def toggle( self ):
        "Toggle the visibility of the children. If they need to be generated, do it."
        self.childContainerWidget.setVisible( not self.childContainerWidget.isVisible( ) )

        if self.needsChildren and self.childContainerWidget.isVisible( ):
            self.generateChildren( )

    def generateChildren( self ):
        "Method to generate child widgets, does nothing if not overridden."
        pass
        
class ExampleTreeNodeWidget( TreeNodeWidget ):
    "An example showing how to generate child widgets on demand."
    def generateChildren( self ):
        for j in range( 1, 9 ):
            self.addChildWidget( QLabel( "child %d" % j ) )
        
